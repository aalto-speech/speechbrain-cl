# ############################################################################
# Model: E2E ASR with attention-based ASR
# Encoder: CRDNN
# Decoder: GRU + beamsearch
# Authors: Georgios Karakasidis 2021 
# Adapted from: Aku Rouhe 2021 
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are instantiated
seed: 1001
__set_seed: !apply:torch.manual_seed [!ref <seed>]
device: cuda:0

# =====================================================
# =================== SHARDS AREA =====================
# =====================================================
use_shards: False
# They below 2 are only needed if `use_shards` is true.
dynamic_batch_kwargs:
    max_sample_len: 480000 # 16000*30=0.5minutes
    sampler_kwargs:
        target_batch_numel: 640000 # 16000*120=2minutes
        max_batch_numel: 1000000
    len_key: 'wav'
train_loader_kwargs:
    num_workers: 4
    looped_nominal_epoch: 10000
# =====================================================
# ================= END SHARD AREA ====================
# =====================================================

# =====================================================
# ======== SUBSAMPLING/RANDOM NOISE AREA ==============
# =====================================================
do_subsample: True
subsampling_percentage: 0.35
subsampling_n_epochs: 3
# additive or multiplicative
# In additive mode we simply add the `subsampling_increase_factor` (S) (which is a 
#   float between 0 and 1) to the current percentage. I.e. p_i = p_i + S
# In multiplicative mode we use the following formula:
#   p_i = p_0 * delta ^ {i/step}
# where `p_0` is the initial percentage, `delta` is the increase factor,
# `i` is the current epoch, and `step` is a normalizer that prevents huge steps.
subsampling_increase_type: multiplicative

# Percentage of data to add every `subsampling_n_epochs` epochs
# This percentage will not be added in a relative way.
# This means that the maximum number of datapoints can be reached before reaching the final epoch
subsampling_increase_factor: 1.5
subsampling_step_length: 5

# Random noise
# Percentage of noise to add among the easy examples.
# E.g. assume that the sorted train set is the following:
#      [0, 1, 2, 3, 4]. We now consider [0] as the easy example,
#      [1, 2] as the medium level ones, and [3, 4] as the hard ones.
#      A noisy_random_percentage of 0.2
#      will add `round(0.6*(0.2*5))`=1 hard examples among
#      the easy ones and `round(0.4*(0.2*5))`=0 "medium-level"
#      examples among the easy ones.
#      0.6 points that 60% of the noisy data are going to be hard examples
#      and 40% are going to be medium-level ones.
#      So the sorted trainset may end up being: [3, 1, 2, 0, 4].
noisy_random_percentage: 0.2
# =====================================================
# ======= END SUBSAMPLING/RANDOM NOISE AREA ===========
# =====================================================

# ['ascending', 'descending', 'random', 'no',
#  'seq_loss', 'ctc_loss', 'seq_ctc_loss', 
#  'wer', 'cer', 
#  'char', 'word', 'token']
sorting: wer
# If true then sort in descending order (hardest to easiest)
reverse: False  # Valid for 'seq_loss', 'ctc_loss', 'seq_ctc_loss', 'wer', 'cer'

# Number of epochs before curriculum learning is applied.
default_sorting_epochs: 1
# Gradient accumulation
gradient_accumulation: 4
gradient_clipping: 5.0

output_neurons: 1750
# data_folder_rirs: ./augmentation_data # noise/ris dataset will automatically be downloaded here
output_folder: !ref exps/transfer_fixed_noisy_ga_<sorting>_subsample_incr/<seed>-<output_neurons>units/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

train_dir: train-complete_segmented
dev_dir: dev_segmented_10sec
test_dir: test_segmented_10sec
max_allowed_test_duration: None

data_folder: kaldi_files
train_csv: !ref <output_folder>/<train_dir>.csv
valid_csv: !ref <output_folder>/<dev_dir>.csv
test_csv: !ref <output_folder>/<test_dir>.csv
skip_prep: False # Skip data preparation
ckpt_interval_minutes: 30 # save checkpoint every N min

# =====================================================
# ============= PREATRAINED MODEL AREA ================
# =====================================================

# Use the ascending CL 100v2 as the pretrained model
pretrained_model_hparams: !ref ahparams/noshards_fixed_text_100h_v2.yaml
use_fixed_sorting: True

# =====================================================
# =========== END PREATRAINED MODEL AREA ==============
# =====================================================

# =====================================================
# ================= TOKENIZER AREA ====================
# =====================================================
# Maximum of 10s utterances in the train/dev/test sets
max_duration_secs: 10.0
# Remove very short utterances from the train/dev sets
min_duration_secs: 1.0
# Removal of special tokens such as .br, .fr etc
remove_special_tokens: True
token_type: bpe
character_coverage: 1.0
# =====================================================
# =============== END TOKENIZER AREA ==================
# =====================================================

# =====================================================
# ================ VAD DECODING AREA ==================
# =====================================================
# Only concerns test set decoding.
use_vad: False
vad_source: speechbrain/vad-crdnn-libriparty  # download from huggingface
vad_dir: ../VAD
vad_savedir: !ref <vad_dir>/results/pretrained_hf/
VAD: !name:speechbrain.pretrained.VAD.from_hparams
    source: !ref <vad_source>
    savedir: !ref <vad_savedir>
collate_fn: !name:cl.batch.PaddedBatchVAD
    device: !ref <device>
# =====================================================
# ============== END VAD DECODING AREA ================
# =====================================================

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Training parameters
number_of_epochs: 15
number_of_ctc_epochs: 10
batch_size: 32
valid_batch_size: 32
test_batch_size: 1
dataloader_options:
    batch_size: !ref <batch_size>
    # num_workers: 6
valid_dataloader_options:
    batch_size: !ref <valid_batch_size>
test_dataloader_options:
    batch_size: !ref <test_batch_size>
    collate_fn: !ref <collate_fn>
    # num_workers: 6
test_data_id: "test"

ctc_weight: 0.5
# ckpt_interval_minutes: -1 # save checkpoint every N min
label_smoothing: 0.1
lr: 0.0001

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 40

# Model parameters
activation: !name:torch.nn.LeakyReLU
dropout: 0.15
cnn_blocks: 2
cnn_channels: (64, 128)
inter_layer_pooling_size: (2, 2)
cnn_kernelsize: (3, 3)
time_pooling_size: 4
rnn_class: !name:speechbrain.nnet.RNN.LSTM
rnn_layers: 3
rnn_neurons: 512
rnn_bidirectional: True
dnn_blocks: 1
dnn_neurons: 512
emb_size: 128
dec_neurons: 512
dec_layers: 1
blank_index: 0
bos_index: 0
eos_index: 0
unk_index: 0

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_beam_size: 4
test_beam_size: 12
eos_threshold: 1.2
using_max_attn_shift: False
max_attn_shift: 240
ctc_weight_decode: 0.0
coverage_penalty: 3.0 
temperature: 2.0
wer_file: !ref <output_folder>/wer_<test_data_id>_beam<test_beam_size>_cov<coverage_penalty>_eos<eos_threshold>_temp<temperature>_noattnshift.txt

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Feature extraction
compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

# Feature normalization (mean and std)
normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
#env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
#    openrir_folder: !ref <data_folder_rirs>
#    babble_prob: 0.0
#    reverb_prob: 0.0
#    noise_prob: 1.0
#    noise_snr_low: 0
#    noise_snr_high: 15

#Adds speech change + time and frequnecy dropouts (time-domain implementation).
#augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
#    sample_rate: !ref <sample_rate>
#    speeds: [95, 100, 105]

# The CRDNN model is an encoder that combines CNNs, RNNs, and DNNs.
encoder: !new:speechbrain.lobes.models.CRDNN.CRDNN
    input_shape: [null, null, !ref <n_mels>]
    activation: !ref <activation>
    dropout: !ref <dropout>
    cnn_blocks: !ref <cnn_blocks>
    cnn_channels: !ref <cnn_channels>
    cnn_kernelsize: !ref <cnn_kernelsize>
    inter_layer_pooling_size: !ref <inter_layer_pooling_size>
    time_pooling: True
    using_2d_pooling: False
    time_pooling_size: !ref <time_pooling_size>
    rnn_class: !ref <rnn_class>
    rnn_layers: !ref <rnn_layers>
    rnn_neurons: !ref <rnn_neurons>
    rnn_bidirectional: !ref <rnn_bidirectional>
    rnn_re_init: True
    dnn_blocks: !ref <dnn_blocks>
    dnn_neurons: !ref <dnn_neurons>
    use_rnnp: False

# Embedding (from indexes to an embedding space of dimension emb_size).
embedding: !new:speechbrain.nnet.embedding.Embedding
    num_embeddings: !ref <output_neurons>
    embedding_dim: !ref <emb_size>

# Attention-based RNN decoder.
decoder: !new:speechbrain.nnet.RNN.AttentionalRNNDecoder
    enc_dim: !ref <dnn_neurons>
    input_size: !ref <emb_size>
    rnn_type: gru
    attn_type: location
    hidden_size: !ref <dec_neurons>
    attn_dim: 1024
    num_layers: !ref <dec_layers>
    scaling: 1.0
    channels: 10
    kernel_size: 100
    re_init: True
    dropout: !ref <dropout>

# Linear transformation on the top of the encoder.
ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dnn_neurons>
    n_neurons: !ref <output_neurons>

# Linear transformation on the top of the decoder.
seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dec_neurons>
    n_neurons: !ref <output_neurons>

# Final softmax (for log posteriors computation).
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True
  
seq_cost: !name:speechbrain.nnet.losses.nll_loss
    label_smoothing: !ref <label_smoothing>

# Cost definition for the CTC part.
ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class
modules:
    encoder: !ref <encoder>
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    ctc_lin: !ref <ctc_lin>
    seq_lin: !ref <seq_lin>
    normalize: !ref <normalize>
    #env_corrupt: !ref <env_corrupt>

# Gathering all the submodels in a single model object.
model: !new:torch.nn.ModuleList
    - - !ref <encoder>
      - !ref <embedding>
      - !ref <decoder>
      - !ref <ctc_lin>
      - !ref <seq_lin>

# Beamsearch is applied on the top of the decoder. If the language model is
# given, a language model is applied (with a weight specified in lm_weight).
# If ctc_weight is set, the decoder uses CTC + attention beamsearch. This
# improves the performance, but slows down decoding. For a description of
# the other parameters, please see the speechbrain.decoders.S2SRNNBeamSearchLM.

# It makes sense to have a lighter search during validation. In this case,
# we don't use the LM and CTC probabilities during decoding.
greedy_search: !new:speechbrain.decoders.S2SRNNGreedySearcher
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    
    
valid_search: !new:speechbrain.decoders.S2SRNNBeamSearcher
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    ctc_linear: !ref <ctc_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    eos_threshold: !ref <eos_threshold>
    using_max_attn_shift: !ref <using_max_attn_shift>
    max_attn_shift: !ref <max_attn_shift>
    coverage_penalty: !ref <coverage_penalty>
    temperature: !ref <temperature>

# The final decoding on the test set can be more computationally demanding.
# In this case, we use the LM + CTC probabilities during decoding as well.
# Please, remove this part if you need a faster decoder.
test_search: !new:speechbrain.decoders.S2SRNNBeamSearcher
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    ctc_linear: !ref <ctc_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    eos_threshold: !ref <eos_threshold>
    using_max_attn_shift: !ref <using_max_attn_shift>
    max_attn_shift: !ref <max_attn_shift>
    coverage_penalty: !ref <coverage_penalty>
    ctc_weight: !ref <ctc_weight_decode>
    temperature: !ref <temperature>

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    annealing_factor: 0.9

opt_class: !name:torch.optim.Adam
      lr: !ref <lr> 

# Functions that compute the statistics to track during the validation step.
error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>
        scheduler: !ref <lr_annealing>
